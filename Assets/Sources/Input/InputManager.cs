//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Sources/Input/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace ProjectGT3.Input
{
    public partial class @InputManager : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputManager()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""CarControl"",
            ""id"": ""77d5bb10-8076-4cb2-b9d7-2e4abae9ec95"",
            ""actions"": [
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""PassThrough"",
                    ""id"": ""47632246-1d31-4afe-afd5-865993b82f97"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnRight"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d376ac95-947c-49e8-9899-b0b739e13565"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drift"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7b6cb216-aa87-4d97-b946-1d5913c3ee95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownGear"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a380f2dd-3a6b-48ad-99a9-82f286a76894"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpGear"",
                    ""type"": ""PassThrough"",
                    ""id"": ""41a003c2-18e6-4752-8446-33419e7c35eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""3db9d67e-7ade-4bfa-82cf-3b199df4b445"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5568ffd8-4603-4f8d-a64f-e295879e225d"",
                    ""path"": ""<XInputController>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""cc7b5905-1d27-418d-a439-e9cacdce3356"",
                    ""path"": ""<XInputController>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""6cd927a8-9c59-4fef-beda-4705fe9f38c4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b0531d9e-c104-441a-b5c4-938424a1f8e5"",
                    ""path"": ""<XInputController>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e2847dc7-bc73-43a5-8770-ab24960de988"",
                    ""path"": ""<XInputController>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""56f210a6-8913-4c04-8cae-f853ec634f2f"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1325f243-d6bf-4f57-aace-aaa8dda07fca"",
                    ""path"": ""<XInputController>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownGear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b581a4c0-d41c-49ef-9ef6-932e15a6725c"",
                    ""path"": ""<XInputController>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpGear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // CarControl
            m_CarControl = asset.FindActionMap("CarControl", throwIfNotFound: true);
            m_CarControl_MoveForward = m_CarControl.FindAction("MoveForward", throwIfNotFound: true);
            m_CarControl_TurnRight = m_CarControl.FindAction("TurnRight", throwIfNotFound: true);
            m_CarControl_Drift = m_CarControl.FindAction("Drift", throwIfNotFound: true);
            m_CarControl_DownGear = m_CarControl.FindAction("DownGear", throwIfNotFound: true);
            m_CarControl_UpGear = m_CarControl.FindAction("UpGear", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CarControl
        private readonly InputActionMap m_CarControl;
        private ICarControlActions m_CarControlActionsCallbackInterface;
        private readonly InputAction m_CarControl_MoveForward;
        private readonly InputAction m_CarControl_TurnRight;
        private readonly InputAction m_CarControl_Drift;
        private readonly InputAction m_CarControl_DownGear;
        private readonly InputAction m_CarControl_UpGear;
        public struct CarControlActions
        {
            private @InputManager m_Wrapper;
            public CarControlActions(@InputManager wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveForward => m_Wrapper.m_CarControl_MoveForward;
            public InputAction @TurnRight => m_Wrapper.m_CarControl_TurnRight;
            public InputAction @Drift => m_Wrapper.m_CarControl_Drift;
            public InputAction @DownGear => m_Wrapper.m_CarControl_DownGear;
            public InputAction @UpGear => m_Wrapper.m_CarControl_UpGear;
            public InputActionMap Get() { return m_Wrapper.m_CarControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CarControlActions set) { return set.Get(); }
            public void SetCallbacks(ICarControlActions instance)
            {
                if (m_Wrapper.m_CarControlActionsCallbackInterface != null)
                {
                    @MoveForward.started -= m_Wrapper.m_CarControlActionsCallbackInterface.OnMoveForward;
                    @MoveForward.performed -= m_Wrapper.m_CarControlActionsCallbackInterface.OnMoveForward;
                    @MoveForward.canceled -= m_Wrapper.m_CarControlActionsCallbackInterface.OnMoveForward;
                    @TurnRight.started -= m_Wrapper.m_CarControlActionsCallbackInterface.OnTurnRight;
                    @TurnRight.performed -= m_Wrapper.m_CarControlActionsCallbackInterface.OnTurnRight;
                    @TurnRight.canceled -= m_Wrapper.m_CarControlActionsCallbackInterface.OnTurnRight;
                    @Drift.started -= m_Wrapper.m_CarControlActionsCallbackInterface.OnDrift;
                    @Drift.performed -= m_Wrapper.m_CarControlActionsCallbackInterface.OnDrift;
                    @Drift.canceled -= m_Wrapper.m_CarControlActionsCallbackInterface.OnDrift;
                    @DownGear.started -= m_Wrapper.m_CarControlActionsCallbackInterface.OnDownGear;
                    @DownGear.performed -= m_Wrapper.m_CarControlActionsCallbackInterface.OnDownGear;
                    @DownGear.canceled -= m_Wrapper.m_CarControlActionsCallbackInterface.OnDownGear;
                    @UpGear.started -= m_Wrapper.m_CarControlActionsCallbackInterface.OnUpGear;
                    @UpGear.performed -= m_Wrapper.m_CarControlActionsCallbackInterface.OnUpGear;
                    @UpGear.canceled -= m_Wrapper.m_CarControlActionsCallbackInterface.OnUpGear;
                }
                m_Wrapper.m_CarControlActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MoveForward.started += instance.OnMoveForward;
                    @MoveForward.performed += instance.OnMoveForward;
                    @MoveForward.canceled += instance.OnMoveForward;
                    @TurnRight.started += instance.OnTurnRight;
                    @TurnRight.performed += instance.OnTurnRight;
                    @TurnRight.canceled += instance.OnTurnRight;
                    @Drift.started += instance.OnDrift;
                    @Drift.performed += instance.OnDrift;
                    @Drift.canceled += instance.OnDrift;
                    @DownGear.started += instance.OnDownGear;
                    @DownGear.performed += instance.OnDownGear;
                    @DownGear.canceled += instance.OnDownGear;
                    @UpGear.started += instance.OnUpGear;
                    @UpGear.performed += instance.OnUpGear;
                    @UpGear.canceled += instance.OnUpGear;
                }
            }
        }
        public CarControlActions @CarControl => new CarControlActions(this);
        public interface ICarControlActions
        {
            void OnMoveForward(InputAction.CallbackContext context);
            void OnTurnRight(InputAction.CallbackContext context);
            void OnDrift(InputAction.CallbackContext context);
            void OnDownGear(InputAction.CallbackContext context);
            void OnUpGear(InputAction.CallbackContext context);
        }
    }
}
